name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  # Lint and Code Quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=high

      - name: Run secret scan
        run: npm run secret-scan

  # Unit and Integration Tests
  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install client dependencies
        run: cd client && npm ci

      - name: Create test environment
        run: |
          cp env.example .env
          echo "MONGODB_URI=mongodb://localhost:27017/sastabazar-test" >> .env
          echo "NODE_ENV=test" >> .env
          echo "JWT_SECRET=test-jwt-secret-for-ci-cd-pipeline-minimum-32-chars" >> .env

      - name: Run server tests
        run: npm test

      - name: Run client tests
        run: cd client && npm test

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test

      - name: Run load tests
        run: npm run test:load
        env:
          NODE_ENV: test

      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            coverage/
            logs/

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install client dependencies
        run: cd client && npm ci

      - name: Build client
        run: cd client && npm run build

      - name: Build server
        run: npm run build:server

      - name: Create deployment package
        run: |
          mkdir -p dist
          cp -r server dist/
          cp -r client/dist dist/client
          cp package*.json dist/
          cp ecosystem.config.js dist/
          cp -r scripts dist/
          tar -czf sastabazar-build.tar.gz dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: sastabazar-build.tar.gz

  # Smoke Tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [build]
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment
        run: |
          cp env.example .env
          echo "MONGODB_URI=mongodb://localhost:27017/sastabazar-test" >> .env
          echo "NODE_ENV=test" >> .env
          echo "JWT_SECRET=test-jwt-secret-for-ci-cd-pipeline-minimum-32-chars" >> .env
          echo "PORT=5000" >> .env

      - name: Start application
        run: |
          npm start &
          sleep 10
          curl -f http://localhost:5000/api/health || exit 1

      - name: Run smoke tests
        run: node tests/smoke-tests.js
        env:
          SMOKE_TEST_URL: http://localhost:5000

      - name: Stop application
        run: pkill -f "node server/index.js" || true

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run OWASP security review
        run: npm run test:security

      - name: Run dependency audit
        run: npm audit --audit-level=high

      - name: Run secret scan
        run: npm run secret-scan

      - name: Check for hardcoded secrets
        run: |
          # Check for common secret patterns
          if grep -r "sk_live_" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå Live Stripe keys found in code"
            exit 1
          fi
          if grep -r "rzp_live_" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå Live Razorpay keys found in code"
            exit 1
          fi
          if grep -r "mongodb+srv://" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå MongoDB connection strings found in code"
            exit 1
          fi

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [smoke-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup deployment
        run: |
          tar -xzf sastabazar-build.tar.gz
          cd dist

      - name: Deploy to staging
        run: |
          # Add your staging deployment commands here
          echo "Deploying to staging environment..."
          # Example: rsync, scp, or cloud deployment commands

      - name: Run staging smoke tests
        run: |
          # Wait for deployment to complete
          sleep 30
          # Run smoke tests against staging environment
          SMOKE_TEST_URL=https://staging.your-domain.com node tests/smoke-tests.js

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [smoke-tests, security-scan]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Setup deployment
        run: |
          tar -xzf sastabazar-build.tar.gz
          cd dist

      - name: Deploy to production
        run: |
          # Add your production deployment commands here
          echo "Deploying to production environment..."
          # Example: rsync, scp, or cloud deployment commands

      - name: Run production smoke tests
        run: |
          # Wait for deployment to complete
          sleep 60
          # Run smoke tests against production environment
          SMOKE_TEST_URL=https://your-domain.com node tests/smoke-tests.js

      - name: Notify deployment success
        run: |
          echo "‚úÖ Production deployment completed successfully!"
          # Add notification logic (Slack, email, etc.)

  # Rollback on Failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    environment: production
    steps:
      - name: Rollback deployment
        run: |
          echo "üö® Rolling back production deployment..."
          # Add rollback logic here
          # Example: restore from backup, revert to previous version

      - name: Notify rollback
        run: |
          echo "‚ö†Ô∏è Production deployment rolled back due to failure"
          # Add notification logic